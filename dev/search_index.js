var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = GenId","category":"page"},{"location":"#GenId","page":"Home","title":"GenId","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for GenId.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [GenId]","category":"page"},{"location":"#GenId.bit_mask_int-NTuple{4, Any}","page":"Home","title":"GenId.bit_mask_int","text":"bit_mask_int(type, v, from, to)\n\nApplies a 64 bit signed integer mask to a value v, with ones between bits in postitions between from and to and zeroes for other bits.  Counting of bits starts at 1. v can't be a negative integer.\n\nExamples\n\njulia> bit_mask_int(Int64, typemax(Int64), 0,0)\n1\njulia> bit_mask_int(Int64, typemax(Int64), 0,1)\n3\n\n\n\n\n\n","category":"method"},{"location":"#GenId.bit_mask_uint-Tuple{Type{<:Unsigned}, Any, Any}","page":"Home","title":"GenId.bit_mask_uint","text":"bit_mask_uint(from, to)\n\nCreates a 64 bit unsigned integer mask, with ones between bits in postitions between from and to and zeroes for other bits.  Counting of bits starts at 1.\n\nExamples\n\njulia> bit_mask_uint(0,0)\n0x0000000000000000000000000000000000000000000000000000000000000001\njulia> bit_mask_uint(63,63)\n0x1000000000000000000000000000000000000000000000000000000000000000\njulia> bit_mask_uint(12,21)\n0x0000000000000000000000000000000000000000001111111111000000000000\n\n\n\n\n\n","category":"method"}]
}
